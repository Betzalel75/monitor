import { Button, VerticalBox, GroupBox, ScrollView, GridBox } from "std-widgets.slint";
import { MemoryView } from "memory_tap.slint";
import { SystemInfoView } from "system_tab.slint";
import { NetworkView } from "network_tab.slint";

export component AppWindow inherits Window {
    min-width: 800px;
    min-height: 600px;
    title: "System Monitor";

    callback refresh();

    // Properties for system info
    in property <string> os-type: "Unknown";
    in property <string> user: "Unknown";
    in property <string> hostname: "Unknown";
    in property <string> cpu-model: "Unknown";
    in property <int> total-tasks: 0;
    in property <string> ram-usage: "0/0 MB";
    in property <string> swap-usage: "0/0 MB";
    in property <string> interface-name;
    in property <string> ipv4;
    // Received data
    in property <string> rx-bytes:"0";
    in property <string> rx-packets:"0";
    in property <string> rx-errors:"0";
    in property <string> rx-drops:"0";
    in property <string> rx-fifo:"0";
    in property <string> rx-frame:"0";
    in property <string> rx-compressed:"0";
    in property <string> rx-multicast:"0";
    // Transmitted data
    in property <string> tx-bytes:"0";
    in property <string> tx-packets:"0";
    in property <string> tx-errors:"0";
    in property <string> tx-drops:"0";
    in property <string> tx-fifo:"0";
    in property <string> tx-colls:"0";
    in property <string> tx-compressed:"0";
    in property <string> tx-carrier:"0";

    HorizontalLayout {

        VerticalBox {

            SystemInfoView {
                os-type: root.os-type;
                user: root.user;
                hostname: root.hostname;
                cpu-model: root.cpu-model;
                total-tasks: root.total-tasks;
            }

            MemoryView {
                ram-usage: root.ram-usage;
                swap-usage: root.swap-usage;
            }

            Button {
                text: "Refresh";
                clicked => {
                    root.refresh();
                }
            }
        
        NetworkView {
            interface-name: root.interface-name;
            ipv4: root.ipv4;

            rx-bytes: root.rx-bytes;
            rx-packets: root.rx-packets;
            rx-errors: root.rx-errors;
            rx-drops: root.rx-drops;
            rx-fifo: root.rx-fifo;
            rx-frame: root.rx-frame;
            rx-compressed: root.rx-compressed;
            rx-multicast: root.rx-multicast;

            tx-bytes: root.tx-bytes;
            tx-packets: root.tx-packets;
            tx-errors: root.tx-errors;
            tx-drops: root.tx-drops;
            tx-fifo: root.tx-fifo;
            tx-colls: root.tx-colls;
            tx-compressed: root.tx-compressed;
            tx-carrier: root.tx-carrier;
        }
        }
    }
}
