import { SystemInfoMonitor, MemoryMonitor, TasksMonitor, NetworkMonitor } from "dashboard_monitors.slint";
import { Sidebar } from "sidebar.slint";
import { Header } from "header.slint";
import { ProcessData, InterfaceInfo, RxInfo, TxInfo } from "data_types.slint";
import {DashboardSkin} from "dashboard_theme.slint";
import { ScrollView, TabWidget, Slider, HorizontalBox, VerticalBox } from "std-widgets.slint";
import { Cores, UsageDiagram } from "components/graphic_view.slint";



component Dashboard inherits VerticalLayout {
    in property <int> active-view;
    in property <string> os-type;
    in property <string> user;
    in property <string> hostname;
    in property <string> cpu-model;
    in property <int> total-tasks;
    in property <string> ram-usage;
    in property <string> swap-usage;
    in property <string> disk-usage;
    // ------------------------------ //
    in property <int> ram-usagel;
    in property <int> swap-usagel;
    in property <int> disk-usagel;
    // ----------------------------- //
    in property <[ProcessData]> process-list;
    in property <[InterfaceInfo]> interface-list;
    in property <[RxInfo]> rx-table;
    in property <[TxInfo]> tx-table;
    in property <string> process-search;
    callback process-search-changed(string) -> [ProcessData];

    callback refresh;
    // --------CPU USAGE-------- //
    in property <[Cores]> cpu-usage;
    // ------------------------- //
    // ---------TIMER---------- //
    in-out property <duration> total-time: 3s;
    property <duration> refresh-interval: 3s;
    callback refresh_interval_changed(duration); // appelé quand l’utilisateur change la valeur

    // ----------------------- //
    
    padding: 20px;
    spacing: 20px;

    property <[string]> titles: ["Dashboard", "System Information", "Memory Usage", "Processes", "Network"];

    property <[string]> subtitles: [
        "Overview of system resources",
        "Basic system information",
        "RAM and swap memory usage",
        "Running processes " + root.total-tasks,
        "Network interfaces and traffic"
    ];

    // Header
    Header {
        title: titles[root.active-view];
        subtitle: subtitles[root.active-view];
        refresh => {
            root.refresh();
        }
    }

    // Main Content
    if (root.active-view == 0): GridLayout {
        spacing: 20px;

        Rectangle {
            HorizontalLayout {
                TasksMonitor {
                    horizontalSpace: 0px;
                    height: 500px;
                    processes: root.process-list;
                    search-query: root.process-search;
                    search-changed(query) => {
                        root.process-search-changed(query);
                    }
                }

                NetworkMonitor {
                    interface-list: root.interface-list;
                    rx-info: root.rx-table;
                    tx-info: root.tx-table;
                }

                spacing: 10px;
            }

            height: 55%;
            col: 0;
            row: 1;
        }

        Rectangle {
            ScrollView {
                HorizontalLayout {
                    SystemInfoMonitor {
                        os-type: root.os-type;
                        user: root.user;
                        hostname: root.hostname;
                        cpu-model: root.cpu-model;
                        total-tasks: root.total-tasks;
                    }

                    spacing: 10px;
                    MemoryMonitor {
                        ram-usage: root.ram-usage;
                        swap-usage: root.swap-usage;
                        ram-usagel: root.ram-usagel;
                        swap-usagel: root.swap-usagel;
                        disk-usage: root.disk-usage;
                        disk-usagel: root.disk-usagel;
                    }
                }
            }

            height: 350px;
            row: 0;
        }
    }
    
    if (root.active-view == 1): VerticalLayout {
        SystemInfoMonitor {
            os-type: root.os-type;
            user: root.user;
            hostname: root.hostname;
            cpu-model: root.cpu-model;
            total-tasks: root.total-tasks;
        }

        VerticalBox {
            slider := Slider {
                maximum: 5s / 1s;
                minimum: 500ms / 1s;
                value: root.refresh-interval / 1s;
                changed(new-duration) => {
                    root.total-time = new-duration * 1s;
                    root.refresh_interval_changed(root.total-time);
                }
            }
            HorizontalBox {
                padding: 0;
                Text {
                    text: "Duration: " + (root.total-time / 1s) + "s";
                    vertical-alignment: center;
                }
            }
        }

        TabWidget {
            Tab {
                title: "CPU";
                UsageDiagram {
                    datapoints: root.cpu-usage;
                }
            }

            Tab {
                title: "Thermal";
            }

            Tab {
                title: "Fan";
            }
        }
    }

    if (root.active-view == 2): MemoryMonitor {
        ram-usage: root.ram-usage;
        swap-usage: root.swap-usage;
        ram-usagel: root.ram-usagel;
        swap-usagel: root.swap-usagel;
        disk-usage: root.disk-usage;
        disk-usagel: root.disk-usagel;
    }

    if (root.active-view == 3): TasksMonitor {
        width: 89%;
        horizontalSpace: 250px;
        processes: root.process-list;
        search-query: root.process-search;
        search-changed(query) => {
            root.process-search-changed(query);
        }
    }

    if (root.active-view == 4): NetworkMonitor {
        interface-list: root.interface-list;
        rx-info: root.rx-table;
        tx-info: root.tx-table;
    }
    
}

export component AppWindow inherits Window {
    min-width: 1024px;
    min-height: 768px;
    title: "System Monitor";
    background: DashboardSkin.palette.mainContent;
    in property <string> process-search;
    callback search(string) -> [ProcessData];

    callback refresh();

    // Properties for system info
    in property <string> os-type: "Unknown";
    in property <string> user: "Unknown";
    in property <string> hostname: "Unknown";
    in property <string> cpu-model: "Unknown";
    in property <int> total-tasks: 0;
    in property <string> ram-usage: "0/0 MB";
    in property <string> swap-usage: "0/0 MB";
    in property <string> disk-usage:"0/0 MB";
    // ------------------------------ //
    in property <int> ram-usagel;
    in property <int> swap-usagel;
    in property <int> disk-usagel;
    // ----------------------------- //
    in property <[InterfaceInfo]> interface-list;
    in property <[RxInfo]> rx-table;
    in property <[TxInfo]> tx-table;
    in property <[ProcessData]> process-list;

    property <int> active-view: 0;
    // --------CPU USAGE-------- //
    in property <[Cores]> cpu-usage;
    // ------------------------- //
    // ---------TIMER---------- //
    in-out property <duration> total-time;
    callback refresh_interval_changed(duration); // appelé quand l’utilisateur change la valeur



    HorizontalLayout {
        padding: 0;
        spacing: 0;

        // Sidebar
        Sidebar {
            active-index <=> root.active-view;
            menu-item-clicked(idx) => {
                root.active-view = idx;
            }
        }

        // Main Content
        Dashboard {
            active-view: root.active-view;
            os-type: root.os-type;
            user: root.user;
            hostname: root.hostname;
            cpu-model: root.cpu-model;
            total-tasks: root.total-tasks;
            cpu-usage: root.cpu-usage;
            ram-usage: root.ram-usage;
            swap-usage: root.swap-usage;
            disk-usage: root.disk-usage;
            // ------------------------ //
            ram-usagel: root.ram-usagel;
            swap-usagel: root.swap-usagel;
            disk-usagel: root.disk-usagel;
            // ------------------------ //
            total-time: root.total-time;
            process-list: root.process-list;
            refresh_interval_changed(value) => {
                root.refresh_interval_changed(value)
            }
            interface-list: root.interface-list;
            rx-table: root.rx-table;
            tx-table: root.tx-table;
            refresh => {
                root.refresh();
            }
            process-search: root.process-search;
            process-search-changed(text) => {
                root.search(text);
            }
        }
    }
}
